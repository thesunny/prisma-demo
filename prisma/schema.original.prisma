generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model archived_pages {
  ancestor_ids     String
  book_id          Int
  id               Int    @default(autoincrement()) @id
  inserted_at      Int
  inserted_by      Int
  markdown         String
  name             String
  original_page_id Int
  sibling_ids      String
  title            String
  books            books  @relation(fields: [book_id], references: [id])

  @@unique([book_id, original_page_id], name: "archived_pages_book_id_original_page_id_unique")
}

model books {
  counter        Int              @default(0)
  created_at     Int
  id             Int              @default(autoincrement()) @id
  name           String
  privacy        Int
  shelf_id       Int?
  title          String
  toc            String
  updated_at     Int
  shelves        shelves?         @relation(fields: [shelf_id], references: [id])
  archived_pages archived_pages[]
  pages          pages[]
  removed_pages  removed_pages[]

  @@unique([shelf_id, name], name: "books_shelf_id_name_unique")
}

model knex_migrations {
  batch          Int?
  id             Int       @default(autoincrement()) @id
  migration_time DateTime?
  name           String?
}

model knex_migrations_lock {
  index     Int  @default(autoincrement()) @id
  is_locked Int?
}

model pages {
  book_id    Int
  created_at Int
  edited_at  Int
  id         Int     @default(autoincrement()) @id
  markdown   String
  name       String?
  title      String
  books      books   @relation(fields: [book_id], references: [id])

  @@unique([book_id, name], name: "pages_book_id_name_unique")
}

model removed_pages {
  ancestor_ids     String
  book_id          Int
  id               Int    @default(autoincrement()) @id
  inserted_at      Int
  inserted_by      Int
  markdown         String
  name             String
  original_page_id Int
  sibling_ids      String
  title            String
  books            books  @relation(fields: [book_id], references: [id])

  @@unique([book_id, original_page_id], name: "removed_pages_book_id_original_page_id_unique")
}

model sessions {
  created_at Int
  expires_at Int
  id         Int    @default(autoincrement()) @id
  token      String @unique
  user_id    Int?
  users      users? @relation(fields: [user_id], references: [id])
}

model shelves {
  created_at      Int
  id              Int     @default(autoincrement()) @id
  name            String  @unique
  pinned_book_ids String  @default(dbgenerated())
  type            String
  books           books[]
  users           users?
}

model users {
  created_at       Int
  email            String
  first_name       String
  id               Int        @id
  last_name        String
  shelf_id         Int        @unique
  starred_book_ids String     @default(dbgenerated())
  shelves          shelves    @relation(fields: [shelf_id], references: [id])
  sessions         sessions[]
}