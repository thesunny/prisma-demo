import * as Knex from "knex"

exports.up = async function (knex: Knex): Promise<any> {
  await knex.schema.createTable("shelves", function (table) {
    table.increments()
    table.string("name").notNullable().unique()
    table.string("type").notNullable() // 'u' for user or 't' for team
    table.jsonb("pinned_book_ids").notNullable().defaultTo([])
    table.integer("created_at").notNullable()
  })
  await knex.schema.createTable("users", function (table) {
    // unique required so prisma knows there is only one user per shelf max
    table.integer("id").notNullable().unique().primary()
    table.string("name").notNullable().unique()
    table.string("first_name").notNullable()
    table.string("last_name").notNullable()
    table.string("email").notNullable()
    table.jsonb("starred_book_ids").notNullable().defaultTo([])
    table.integer("created_at").notNullable()
    table.foreign("id").references("shelves.id")
  })
  await knex.schema.createTable("sessions", function (table) {
    table.increments()
    table.string("token").notNullable().unique()
    table.integer("user_id")
    table.integer("created_at").notNullable()
    table.integer("expires_at").notNullable()
    table.foreign("user_id").references("users.id")
  })
  await knex.schema.createTable("books", function (table) {
    table.increments()
    table.integer("shelf_id")
    table.string("name").notNullable()
    table.string("title").notNullable()
    table.integer("privacy").notNullable()
    table.jsonb("toc").notNullable()
    table.integer("counter").notNullable().defaultTo(0)
    table.integer("created_at").notNullable()
    table.integer("updated_at").notNullable()
    table.unique(["shelf_id", "name"])
    table.foreign("shelf_id").references("shelves.id")
  })
  await knex.schema.createTable("pages", function (table) {
    table.increments()
    table.integer("book_id").notNullable()
    table.string("name")
    table.string("title").notNullable()
    table.text("markdown").notNullable()
    table.integer("created_at").notNullable()
    table.integer("edited_at").notNullable()
    table.unique(["book_id", "name"])
    table.foreign("book_id").references("books.id")
  })
  await knex.schema.createTable("removed_pages", function (table) {
    table.increments()
    table.integer("book_id").notNullable()
    table.integer("original_page_id").notNullable()
    table.jsonb("sibling_ids").notNullable()
    table.jsonb("ancestor_ids").notNullable()
    table.string("name").notNullable()
    table.string("title").notNullable()
    table.text("markdown").notNullable()
    table.integer("inserted_at").notNullable()
    table.integer("inserted_by").notNullable()
    table.unique(["book_id", "original_page_id"])
    table.foreign("book_id").references("books.id")
  })
  await knex.schema.createTable("archived_pages", function (table) {
    table.increments()
    table.integer("book_id").notNullable()
    table.integer("original_page_id").notNullable()
    table.jsonb("sibling_ids").notNullable()
    table.jsonb("ancestor_ids").notNullable()
    table.string("name").notNullable()
    table.string("title").notNullable()
    table.text("markdown").notNullable()
    table.integer("inserted_at").notNullable()
    table.integer("inserted_by").notNullable()
    table.unique(["book_id", "original_page_id"])
    table.foreign("book_id").references("books.id")
  })
}

exports.down = async function (knex: Knex): Promise<any> {
  await knex.schema.dropTable("archived_pages")
  await knex.schema.dropTable("removed_pages")
  await knex.schema.dropTable("pages")
  await knex.schema.dropTable("books")
  await knex.schema.dropTable("sessions")
  await knex.schema.dropTable("users")
  await knex.schema.dropTable("shelves")
}
